/*
 * Data Repository Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.5.0
 * Contact: ga4gh-cloud@ga4gh.org
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger
import (
	"time"
)

// GA4GH service
type Service struct {
	// Unique ID of this service. Reverse domain name notation is recommended, though not required. The identifier should attempt to be globally unique so it can be used in downstream aggregator services e.g. Service Registry.
	Id string `json:"id"`
	// Name of this service. Should be human readable.
	Name string `json:"name"`

	Type_ *ServiceType `json:"type"`
	// Description of the service. Should be human readable and provide information about the service.
	Description string `json:"description,omitempty"`

	Organization *ServiceOrganization `json:"organization"`
	// URL of the contact for the provider of this service, e.g. a link to a contact form (RFC 3986 format), or an email (RFC 2368 format).
	ContactUrl string `json:"contactUrl,omitempty"`
	// URL of the documentation of this service (RFC 3986 format). This should help someone learn how to use your service, including any specifics required to access data, e.g. authentication.
	DocumentationUrl string `json:"documentationUrl,omitempty"`
	// Timestamp describing when the service was first deployed and available (RFC 3339 format)
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// Timestamp describing when the service was last updated (RFC 3339 format)
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Environment the service is running in. Use this to distinguish between production, development and testing/staging deployments. Suggested values are prod, test, dev, staging. However this is advised and not enforced.
	Environment string `json:"environment,omitempty"`
	// Version of the service being described. Semantic versioning is recommended, but other identifiers, such as dates or commit hashes, are also allowed. The version should be changed whenever the service is updated.
	Version string `json:"version"`
}
